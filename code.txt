import * as THREE from '../build/three.module.js';
//import {OBJLoader2} from './js/OBJLoader2.js';
//import {OrbitControls} from './js/OrbitControls.js';
//import {MTLLoader} from './js/MTLLoader.js';
//import {VRButton} from './js/VRButton.js';
import {GLTFLoader} from './js/GLTFLoader.js';
import {PointerLockControls} from './js/PointerLockControls.js';

var raycaster;
var objects = [];

var moveForward = false;
var moveBackward = false;
var moveLeft = false;
var moveRight = false;
var canJump = false;

var prevTime = performance.now();
var velocity = new THREE.Vector3();
var direction = new THREE.Vector3();
var vertex = new THREE.Vector3();
var color = new THREE.Color();

var camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight, 1, 1000);
camera.position.set(0.31, 1.16, 0.51);

var scene = new THREE.Scene();
scene.background = new THREE.Color(0x5a5a5a);

// renderer.xr.enabled = true;
// document.body.appendChild(VRButton.createButton(renderer));

//camera.position.z += 5;
// let camGroup = new THREE.Group();

// camGroup.position.set(0.31, 1.16, 0.51);
// scene.add(camGroup);
// camGroup.add(camera);

// var controls = new OrbitControls(camera, renderer.domElement);
// controls.enableDamping = true;
// controls.campingFactor = 0.25;
// controls.enableZoom = true;

// var keyLight = new THREE.DirectionalLight(new THREE.Color('rgb(30, 100%, 75%)'));
// keyLight.position.set(-100, 0, 100);

var keyLight = new THREE.AmbientLight(new THREE.Color('rgb(2, 2, 2)'));
keyLight.position.set(-100, 0, 100);

// var fillLight = new THREE.DirectionalLight(new THREE.Color('rgb(240, 255, 225)'));
// fillLight.position.set(100, 0, 100);

// var backLight = new THREE.DirectionalLight(0xffffff, 1.0);
// backLight.position.set(100, 0, -100).normalize();

scene.add(keyLight);
// // scene.add(fillLight);
// // scene.add(backLight);

// let mtlLoader = new MTLLoader();
// mtlLoader.load('./models/80000faces.mtl', function(materials){
  
//   materials.preload();

//   let objLoader = new OBJLoader2();
//   //objLoader.setMaterials(materials);
//   objLoader.load('./models/80000faces.obj', function(object){
//   //object.position.set(0,1.6,0);
//   scene.add(object);
//   });
// });

var controls = new PointerLockControls( camera, document.body );

var blocker = document.getElementById( 'blocker' );
var instructions = document.getElementById( 'instructions' );

instructions.addEventListener( 'click', function () {

	controls.lock();

  }, false );
  
controls.addEventListener( 'lock', function () {

	instructions.style.display = 'none';
	blocker.style.display = 'none';
} );

controls.addEventListener( 'unlock', function () {

	blocker.style.display = 'block';
	instructions.style.display = '';
} );

scene.add( controls.getObject() );

var onKeyDown = function ( event ) {

	switch ( event.keyCode ) {

		case 38: // up
		case 87: // w
		        moveForward = true;
	        	break;

		case 37: // left
		case 65: // a
		        moveLeft = true;
		        break;

		case 40: // down
		case 83: // s
		        moveBackward = true;
		        break;

		case 39: // right
		case 68: // d
		        moveRight = true;
		        break;

		case 32: // space
		        if ( canJump === true ) velocity.y += 350;
		        canJump = false;
		        break;

	}

};

var onKeyUp = function ( event ) {

	switch ( event.keyCode ) {

		case 38: // up
		case 87: // w
		        moveForward = false;
		        break;

		case 37: // left
		case 65: // a
		        moveLeft = false;
		        break;

		case 40: // down
		case 83: // s
		        moveBackward = false;
		        break;

		case 39: // right
		case 68: // d
		        moveRight = false;
		        break;

	}

};

document.addEventListener( 'keydown', onKeyDown, false );
document.addEventListener( 'keyup', onKeyUp, false );

raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, - 1, 0 ), 0, 10 );


// var floorGeometry = new THREE.PlaneBufferGeometry( 2000, 2000, 100, 100 );
// floorGeometry.rotateX( - Math.PI / 2 );

// // vertex displacement

// var position = floorGeometry.attributes.position;

// for ( var i = 0, l = position.count; i < l; i ++ ) {

//   vertex.fromBufferAttribute( position, i );

//   vertex.x += Math.random() * 20 - 10;
//   vertex.y += Math.random() * 2;
//   vertex.z += Math.random() * 20 - 10;

//   position.setXYZ( i, vertex.x, vertex.y, vertex.z );

// }

// floorGeometry = floorGeometry.toNonIndexed(); // ensure each face has unique vertices

// position = floorGeometry.attributes.position;
// var colors = [];

// for ( var i = 0, l = position.count; i < l; i ++ ) {

//   color.setHSL( Math.random() * 0.3 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );
//   colors.push( color.r, color.g, color.b );

// }

// // floorGeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );

// // var floorMaterial = new THREE.MeshBasicMaterial( { vertexColors: true } );

// // var floor = new THREE.Mesh( floorGeometry, floorMaterial );
// scene.add( floor );

var loader = new GLTFLoader();
loader.load('./models/80000textured.glb', function (gltf) {
    
  scene.add( gltf.scene );

	gltf.animations; // Array<THREE.AnimationClip>
	gltf.scene; // THREE.Group
	gltf.scenes; // Array<THREE.Group>
	gltf.cameras; // Array<THREE.Camera>
	gltf.asset; // Object
});

var renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

window.addEventListener( 'resize', onWindowResize, false );


function onWindowResize() {

  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize( window.innerWidth, window.innerHeight );

}

function animate(){
  requestAnimationFrame( animate );

  if ( controls.isLocked === true ) {
    
    raycaster.ray.origin.copy( controls.getObject().position );
  	raycaster.ray.origin.y -= 10;

		var intersections = raycaster.intersectObjects( objects);

    var onObject = intersections.length > 0;
          
    var time = performance.now();
    var delta = ( time - prevTime ) / 1000;

    velocity.x -= velocity.x * 10.0 * delta;
    velocity.z -= velocity.z * 10.0 * delta;

    velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass

    direction.z = Number( moveForward ) - Number( moveBackward );
    direction.x = Number( moveRight ) - Number( moveLeft );
    direction.normalize(); // this ensures consistent movements in all directions

    if ( moveForward || moveBackward ) velocity.z -= direction.z * 400.0 * delta;
    if ( moveLeft || moveRight ) velocity.x -= direction.x * 400.0 * delta;

    if ( onObject === true ) {

      velocity.y = Math.max( 0, velocity.y );
      canJump = true;

    }

    controls.moveRight( - velocity.x * delta );
    controls.moveForward( - velocity.z * delta );

    controls.getObject().position.y += ( velocity.y * delta ); // new behavior

    if ( controls.getObject().position.y < 10 ) {

      velocity.y = 0;
      controls.getObject().position.y = 10;

      canJump = true;

    }

    prevTime = time;

  }

  renderer.render( scene, camera );
}
// use this if you are wanting to use three js and webXr.
// renderer.setAnimationLoop(() => {

//   //controls.update();
//   pointer.update();
//   renderer.render(scene, camera);
// });

animate();